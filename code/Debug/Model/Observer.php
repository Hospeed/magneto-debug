<?php

/**
 * Class Sheep_Debug_Model_Observer
 *
 * @category Sheep
 * @package  Sheep_Debug
 * @license  Copyright: Pirate Sheep, 2016, All Rights reserved.
 * @link     https://piratesheep.com
 */
class Sheep_Debug_Model_Observer
{

    /**
     * Returns request info model associated to current request.
     *
     * @return Sheep_Debug_Model_RequestInfo
     */
    public function getRequestInfo()
    {
        return Mage::getSingleton('sheep_debug/requestInfo');
    }


    /**
     * Listens to controller_front_init_before event. An event that we can consider the start of the request.
     * Current store is initialized.
     *
     */
    public function onControllerFrontInitBefore()
    {
        $this->getRequestInfo()->setStoreId(Mage::app()->getStore()->getId());
        $this->getRequestInfo()->initLogging();
    }


    /**
     * Listens to controller_action_predispatch event to prevent undesired access
     * TODO: review access permissions
     *
     * We listen to this event to filter access to actions defined by Debug module.
     * We allow only actions if debug toolbar is on and ip is listed in Developer Client Restrictions
     *
     * @param Varien_Event_Observer $observer
     *
     * @return void
     */
    public function onActionPreDispatch(Varien_Event_Observer $observer)
    {
        /** @noinspection PhpUndefinedMethodInspection */
        $action = $observer->getEvent()->getControllerAction();

        // Record action that handled current request
        $this->getRequestInfo()->addControllerAction($action);


//        $this->getRequestInfo()->getLogging()->startRequest();

//        $moduleName = $action->getRequest()->getControllerModule();
//
//
//        if (strpos($moduleName, "Sheep_Debug") === 0 && !Mage::helper('sheep_debug')->isRequestAllowed()) {
//
//            Mage::log("Access to Magneto_Debug's actions blocked: dev mode is set to false.");
//            // $response = $action->getResponse();
//            // $response->setHttpResponseCode(404);
//            // $response->setBody('Site access denied.');
//            //$action->setDispatched(true)
//            //
//            exit();
//        }
    }


    /**
     * Listens to controller_action_layout_generate_blocks_after and records
     * instantiated blocks
     *
     * @param Varien_Event_Observer $observer
     */
    public function onLayoutGenerate(Varien_Event_Observer $observer)
    {
        /** @var Mage_Core_Model_Layout $layout */
        /** @noinspection PhpUndefinedMethodInspection */
        $layout = $observer->getEvent()->getLayout();
        $requestInfo = $this->getRequestInfo();

        // Adds block description for all blocks generated by layout
        $layoutBlocks = $layout->getAllBlocks();
        foreach ($layoutBlocks as $block) {
            $requestInfo->addBlock($block);
        }

        // Add design
        /** @var Mage_Core_Model_Design_Package $design */
        $design = Mage::getSingleton('core/design_package');
        $requestInfo->addLayout($layout, $design);
    }


    /**
     * Listens to core_block_abstract_to_html_before event and records blocks
     * that are about to being rendered.
     *
     * @param Varien_Event_Observer $observer
     */
    public function onBlockToHtml(Varien_Event_Observer $observer)
    {
        /** @var $event Varien_Event */
        $event = $observer->getEvent();
        /* @var $block Mage_Core_Block_Abstract */
        $block = $event->getBlock();
        $requestInfo = $this->getRequestInfo();

        if ($this->_skipBlock($block)) {
            return;
        }

        try {
            $blockInfo = $requestInfo->getBlock($block->getNameInLayout());
        } catch (Exception $e) {
            // block was not found - lets add it now
            $blockInfo = $requestInfo->addBlock($block);
        }

        $blockInfo->startRendering($block);
    }


    /**
     * Listens to core_block_abstract_to_html_after event and computes time spent in
     * block's _toHtml (rendering time).
     *
     * @param Varien_Event_Observer $observer
     */
    public function onBlockToHtmlAfter(Varien_Event_Observer $observer)
    {
        $event = $observer->getEvent();
        /* @var $block Mage_Core_Block_Abstract */
        $block = $event->getBlock();

        // Don't list blocks from Debug module
        if ($this->_skipBlock($block)) {
            return;
        }

        $blockInfo = $this->getRequestInfo()->getBlock($block->getNameInLayout());
        $blockInfo->completeRendering($block);
    }


    /**
     * Listens to controller_action_postdispatch event and captures route and controller
     * information.
     *
     * @param Varien_Event_Observer $event
     */
    public function onActionPostDispatch(Varien_Event_Observer $event)
    {
        /** @var Mage_Core_Controller_Varien_Action $action */
        /** @noinspection PhpUndefinedMethodInspection */
        $action = $event->getControllerAction();

        $this->getRequestInfo()->addControllerAction($action);
    }


    /**
     * Listens to core_collection_abstract_load_before and eav_collection_abstract_load_before events
     * and records loaded collections
     *
     * @param Varien_Event_Observer $event
     */
    public function onCollectionLoad(Varien_Event_Observer $event)
    {
        /** @var Mage_Core_Model_Resource_Db_Collection_Abstract */
        $collection = $event->getCollection();
        $this->getRequestInfo()->addCollection($collection);
    }


    /**
     * Listens to model_load_after and records loaded models
     *
     * @param Varien_Event_Observer $observer
     */
    public function onModelLoad(Varien_Event_Observer $observer)
    {
        $event = $observer->getEvent();
        /** @noinspection PhpUndefinedMethodInspection */
        $model = $event->getObject();
        $this->getRequestInfo()->addModel($model);
    }





    /**
     * Listens to controller_front_send_response_after. This event represents the end of a request.
     *
     * @param Varien_Event_Observer $observer
     */
    public function onControllerFrontSendResponseAfter(Varien_Event_Observer $observer)
    {
        $this->getRequestInfo()->getLogging()->endRequest();
    }

    /**
     *
     * TODO: Make this a setting
     *
     * @return bool
     */
    protected function _skipCoreBlocks()
    {
        return false;
    }


    /**
     * Logic that checks if we should ignore this block
     *
     * @param $block Mage_Core_Block_Abstract
     * @return bool
     */
    protected function _skipBlock($block)
    {
        $blockClass = get_class($block);

        if ($this->_skipCoreBlocks() && strpos($blockClass, 'Mage_') === 0) {
            return true;
        }

        // Skip our own blocks
        if (strpos($blockClass, 'Sheep_Debug_Block') === 0) {
            return true;
        }

        return false;
    }

}
